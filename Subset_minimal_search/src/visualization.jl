# using CairoMakie

# img = train_X_binary[:, 1]
# img = train_X_bin_neg[:, 1]
I3 = [7,63,73,79,96,101,110,133,145,155,161,163,174,191,201,207,232,237,242,257,296,298,299,300,301,302,326,328,330,338,355,357,358,359,360,378,390,404,417,432,441,489,538,559,567,602,604,626,636,643,647,700,705,729]
I2 = [11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]
I1 = [5,7,8,9,12,19,23,28,32,48,51,52,76,113,151,154,204,206,208,215,216,235,246,248,252,255]

# subsubset_I2: [SBitSet{13,UInt64}{7,96,101,110,155,161,174,201,237,242,257,298,301,326,328,330,338,378,432,559,602,604,626,729,}, SBitSet{13,UInt64}{110,133,145,161,163,174,242,257,296,299,301,302,378,404,417,538,559,636,}, SBitSet{13,UInt64}{79,96,101,145,155,161,174,201,207,232,301,302,326,338,359,432,441,489,559,567,647,700,705,729,}, SBitSet{13,UInt64}{7,73,79,96,145,155,161,174,300,302,330,360,626,700,705,}, SBitSet{13,UInt64}{73,79,174,302,330,355,357,359,360,489,626,705,729,}, SBitSet{13,UInt64}{7,63,101,155,201,257,300,326,328,338,357,390,441,538,559,567,705,}, SBitSet{13,UInt64}{7,63,101,110,145,155,163,237,296,298,299,301,338,538,567,602,643,705,729,}, SBitSet{13,UInt64}{7,63,79,101,110,133,155,174,191,207,237,242,298,300,326,328,330,359,360,432,559,602,604,626,647,705,729,}, SBitSet{13,UInt64}{73,101,110,133,145,161,163,191,232,242,298,300,302,328,338,357,359,360,404,417,432,538,626,647,729,}, SBitSet{13,UInt64}{63,73,79,133,145,155,161,174,191,201,232,242,296,298,299,301,302,330,355,357,358,390,432,441,489,559,626,700,}, SBitSet{13,UInt64}{63,79,133,161,174,201,232,242,296,298,301,328,355,358,359,360,441,489,559,602,636,}, SBitSet{13,UInt64}{79,101,110,155,207,237,296,299,300,301,302,326,330,355,359,390,432,538,559,602,604,643,705,}, SBitSet{13,UInt64}{7,63,73,79,96,101,110,133,145,155,161,163,174,191,201,207,232,237,242,257,296,298,299,300,301,302,326,328,330,338,355,357,358,359,360,378,390,404,417,432,441,489,538,559,567,602,604,626,636,643,647,700,705,729,}, SBitSet{13,UInt64}{96,133,145,163,191,207,232,237,257,298,390,441,602,}, SBitSet{13,UInt64}{96,110,133,242,298,300,301,328,355,359,378,404,417,432,538,559,567,602,636,643,705,729,}, SBitSet{13,UInt64}{79,96,161,174,191,207,242,257,296,338,355,358,360,404,417,559,567,602,636,}, SBitSet{13,UInt64}{73,96,101,155,161,191,232,237,257,298,300,302,326,328,338,357,359,360,378,390,441,602,604,636,643,647,700,}, SBitSet{13,UInt64}{7,63,73,79,96,101,110,133,145,155,161,163,174,191,201,207,232,237,242,257,296,298,299,300,301,302,326,328,330,338,355,357,358,359,360,378,390,404,417,432,441,489,538,559,567,602,604,626,636,643,647,700,705,729,}, SBitSet{13,UInt64}{63,73,79,101,110,133,155,161,163,174,207,237,296,302,338,357,359,378,390,602,626,636,643,700,729,}, SBitSet{13,UInt64}{73,96,101,110,133,155,161,163,201,207,301,326,328,330,358,360,390,404,432,538,602,626,636,643,729,}, SBitSet{13,UInt64}{7,63,73,79,96,110,145,155,174,191,207,232,242,302,328,330,338,357,358,359,360,390,417,432,489,559,647,700,}]
# Subsubset I1: Any[SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{42,85,112,183,190,}, SBitSet{4,UInt64}{27,42,186,190,197,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{27,67,157,183,186,190,197,217,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,60,69,85,209,}, SBitSet{4,UInt64}{27,42,60,84,85,156,183,209,217,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,32,42,60,84,112,156,157,191,197,217,}, SBitSet{4,UInt64}{11,67,83,84,112,156,186,191,209,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{42,60,69,83,156,157,191,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{32,42,60,67,69,83,85,156,157,186,190,191,209,217,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{27,84,85,183,217,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}, SBitSet{4,UInt64}{32,60,67,69,83,156,157,}, SBitSet{4,UInt64}{27,156,186,209,224,}, SBitSet{4,UInt64}{42,84,85,157,209,217,}, SBitSet{4,UInt64}{11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224,}]
subsubset_I2 = [
    SBitSet{13,UInt64}([7,96,101,110,155,161,174,201,237,242,257,298,301,326,328,330,338,378,432,559,602,604,626,729]),
    SBitSet{13,UInt64}([110,133,145,161,163,174,242,257,296,299,301,302,378,404,417,538,559,636]),
    SBitSet{13,UInt64}([79,96,101,145,155,161,174,201,207,232,301,302,326,338,359,432,441,489,559,567,647,700,705,729]),
    SBitSet{13,UInt64}([7,73,79,96,145,155,161,174,300,302,330,360,626,700,705]),
    SBitSet{13,UInt64}([73,79,174,302,330,355,357,359,360,489,626,705,729]),
    SBitSet{13,UInt64}([7,63,101,155,201,257,300,326,328,338,357,390,441,538,559,567,705]),
    SBitSet{13,UInt64}([7,63,101,110,145,155,163,237,296,298,299,301,338,538,567,602,643,705,729]),
    SBitSet{13,UInt64}([7,63,79,101,110,133,155,174,191,207,237,242,298,300,326,328,330,359,360,432,559,602,604,626,647,705,729]),
    SBitSet{13,UInt64}([73,101,110,133,145,161,163,191,232,242,298,300,302,328,338,357,359,360,404,417,432,538,626,647,729]),
    SBitSet{13,UInt64}([63,73,79,133,145,155,161,174,191,201,232,242,296,298,299,301,302,330,355,357,358,390,432,441,489,559,626,700]),
    SBitSet{13,UInt64}([63,79,133,161,174,201,232,242,296,298,301,328,355,358,359,360,441,489,559,602,636]),
    SBitSet{13,UInt64}([79,101,110,155,207,237,296,299,300,301,302,326,330,355,359,390,432,538,559,602,604,643,705]),
    SBitSet{13,UInt64}([7,63,73,79,96,101,110,133,145,155,161,163,174,191,201,207,232,237,242,257,296,298,299,300,301,302,326,328,330,338,355,357,358,359,360,378,390,404,417,432,441,489,538,559,567,602,604,626,636,643,647,700,705,729]),
    SBitSet{13,UInt64}([96,133,145,163,191,207,232,237,257,298,390,441,602]),
    SBitSet{13,UInt64}([96,110,133,242,298,300,301,328,355,359,378,404,417,432,538,559,567,602,636,643,705,729]),
    SBitSet{13,UInt64}([79,96,161,174,191,207,242,257,296,338,355,358,360,404,417,559,567,602,636]),
    SBitSet{13,UInt64}([73,96,101,155,161,191,232,237,257,298,300,302,326,328,338,357,359,360,378,390,441,602,604,636,643,647,700]),
    SBitSet{13,UInt64}([7,63,73,79,96,101,110,133,145,155,161,163,174,191,201,207,232,237,242,257,296,298,299,300,301,302,326,328,330,338,355,357,358,359,360,378,390,404,417,432,441,489,538,559,567,602,604,626,636,643,647,700,705,729]),
    SBitSet{13,UInt64}([63,73,79,101,110,133,155,161,163,174,207,237,296,302,338,357,359,378,390,602,626,636,643,700,729]),
    SBitSet{13,UInt64}([73,96,101,110,133,155,161,163,201,207,301,326,328,330,358,360,390,404,432,538,602,626,636,643,729]),
    SBitSet{13,UInt64}([7,63,73,79,96,110,145,155,174,191,207,232,242,302,328,330,338,357,358,359,360,390,417,432,489,559,647,700])
]

subsubset_I1 = [
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([42,85,112,183,190]),
    SBitSet{4,UInt64}([27,42,186,190,197]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([27,67,157,183,186,190,197,217]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,60,69,85,209]),
    SBitSet{4,UInt64}([27,42,60,84,85,156,183,209,217]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,32,42,60,84,112,156,157,191,197,217]),
    SBitSet{4,UInt64}([11,67,83,84,112,156,186,191,209]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([42,60,69,83,156,157,191,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([32,42,60,67,69,83,85,156,157,186,190,191,209,217,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([27,84,85,183,217]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224]),
    SBitSet{4,UInt64}([32,60,67,69,83,156,157]),
    SBitSet{4,UInt64}([27,156,186,209,224]),
    SBitSet{4,UInt64}([42,84,85,157,209,217]),
    SBitSet{4,UInt64}([11,27,32,42,60,67,69,83,84,85,112,156,157,183,186,190,191,197,209,217,224])
]


# I3, I2, I1 = stets_to_vis
# I2 = [i for i in I2]
fig = Figure()
fig = Figure(resolution = (2000, 1800))
# Number of neurons per layer
neurons_per_column = [1, length(I2), length(I1), 1]
neurons_per_column = [1, 3, 4, 1]
I3 = [1, 2, 3]
I2 = [1, 2, 3]
I1 = [1, 2, 3, 4]
subsubset_I2 = [SBitSet{13,UInt64}([2]),
                SBitSet{13,UInt64}([1]),
                SBitSet{13,UInt64}([3])]
subsubset_I1 = [SBitSet{4,UInt64}([1, 2]),
                SBitSet{4,UInt64}([1, 3]),
                SBitSet{4,UInt64}([2, 3]),
                SBitSet{4,UInt64}([1, 2, 3])]
                    

# A grid for each layer (arranged in a column)
col_grids = [GridLayout(fig[1, i]; valign = :center) for i in eachindex(neurons_per_column)]
# An axis per neuron
col_axes = [
    [Axis(col_grids[i][j, 1]) for j in 1:neurons_per_column[i]]
    for i in eachindex(neurons_per_column)
]

# Plot into the axes
col = 1
for col_of_axes in col_axes
    row = 1
    for axis in col_of_axes
        img = train_X_bin_neg[:, 1]
        # println("col: $col, row: $row")
        hidedecorations!(axis)
        hidespines!(axis)
        axis.aspect[] = DataAspect()
        axis.yreversed[] = true
        if col == 1
            ii = collect(I3)
        elseif col == 2
            ii = collect(subsubset_I2[row])
        elseif col == 3
            ii = []
            for j in subsubset_I1[row]
                for iii in collect(1:length(I2))
                    if j == I2[iii]
                        j = iii
                        break
                    end
                end
                ii = union(ii, collect(subsubset_I2[j]))
            end
        else
            ii = collect(I3)
        end

        img[ii] .= 2
        img_resh = reshape(img, 28, 28)
        heatmap!(axis, img_resh; colormap = :viridis)
        row += 1
    end
    col += 1
end
# Size the columns that are not the input/output columns appropriately
# l = 1
for (nlayers, grid) in collect(zip(neurons_per_column, col_grids))[begin+1:end-1]
    grid.tellheight[] = false
    grid.height[] = Relative(nlayers / maximum(neurons_per_column))
    # if l == 1
    #     grid.tellheight[] = false
    #     grid.height[] = Relative(nlayers / maximum(neurons_per_column) + 0.05)
    # else
    #     grid.height[] = Relative(nlayers / maximum(neurons_per_column))
    # end
    # l += 1
end

# Connect random neurons
# First, figure out what neurons to connect
important_neurons = [rand(1:n, 2) for n in neurons_per_column]
important_neurons= [[[1]], 
                    [[1], [1], [1], [1]],
                    [[1], [2, 3], [3]], 
                    [[1]]]
# println(important_neurons)
# I2_subsubsets = subsubset_I2
important_neurons[1] = [[1]]
important_neurons[2] = [[1] for i in collect(1:length(I2))]
important_neurons[3] = [[] for i in collect(1:length(I1))]
important_neurons[4] = [[1:length(I1)...]]

for i in 1:length(I1)
    for j in subsubset_I1[i]
        for iii in collect(1:length(I2))
            if j == I2[iii]
                println("Found for $j index is $iii in I2")
                push!(important_neurons[3][i], iii)
                break
            end
        end
    end
end
# println(subsubset_I1[9])
# println(important_neurons[4])

# This utility function computes the "east" and "west" anchors (in latex parlance)
function _compute_left_right_anchors(bbox_obs)
    left_anchor = @lift(Point2($(bbox_obs).origin[1], $(bbox_obs).origin[2] + $(bbox_obs).widths[2] / 2))
    right_anchor = @lift(Point2($(bbox_obs).origin[1] + $(bbox_obs).widths[1], $(bbox_obs).origin[2] + $(bbox_obs).widths[2] / 2))
    # return NamedTuple of observables
    return (; left = left_anchor, right = right_anchor)
end

# Compute anchors-as-observables for each axis
axis_anchors = [
    [
        _compute_left_right_anchors(axis.scene.viewport)
        for axis in col_of_axes
    ]
    for col_of_axes in col_axes
]
# Connect them up!
# neurons_per_column = [1, 4, 3, 1]
for layer_idx in collect(eachindex(neurons_per_column))[2:end] # 1:3
    neurons_for_this_layer = important_neurons[layer_idx]
    println("layer: ", layer_idx)
    for dest_idx in collect(1:neurons_per_column[layer_idx])
        println("neuron: $dest_idx, ", "its subset for prev layer: ", neurons_for_this_layer[dest_idx])
        for source_idx in neurons_for_this_layer[dest_idx]
            println("source: ", source_idx)
            lines!(
                fig.scene, 
                lift(axis_anchors[layer_idx-1][source_idx].right, axis_anchors[layer_idx][dest_idx].left) do start, stop
                    rel = stop - start
                    c1 = Point2(start[1] + rel[1]/4, start[2])
                    c2 = Point2(stop[1] - rel[1]/4, stop[2])
                    return BezierPath([MoveTo(start), CurveTo(c1, c2, stop)])
                end;
                color = :black,
            )
        end
    end
end

fig

save("my_figure_test.png", fig)